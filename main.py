import sqlite3
import asyncio
import yagmail
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)

BOT_TOKEN = ''
ADMIN_ID = 5201926556
command = "d"
user_states = {}


def add_early_completed_column(conn):
    cursor = conn.cursor()
    cursor.execute("PRAGMA table_info(user_stats)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'early_completed' not in columns:
        cursor.execute('ALTER TABLE user_stats ADD COLUMN early_completed INTEGER DEFAULT 0')
        conn.commit()


def init_db():
    conn = sqlite3.connect('deadlines.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS deadlines (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        subject TEXT,
        deadline TEXT,
        task TEXT,
        reminder_sent INTEGER DEFAULT 0,
        completed INTEGER DEFAULT 0)''')
    cursor.execute("PRAGMA table_info(user_ids)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'user_ids' not in [table[0] for table in
                          cursor.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall()]:
        cursor.execute('''CREATE TABLE user_ids (
            id INTEGER PRIMARY KEY, 
            user_email TEXT,
            user_name TEXT)''')

    elif 'user_name' not in columns:
        cursor.execute('ALTER TABLE user_ids ADD COLUMN user_name TEXT')
    cursor.execute('''CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER PRIMARY KEY,
        tasks_completed INTEGER DEFAULT 0,
        last_completed TEXT,
        streak_days INTEGER DEFAULT 0,
        early_completed INTEGER DEFAULT 0)''')

    add_early_completed_column(conn)

    conn.commit()
    return conn


conn = init_db()


async def show_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor = conn.cursor()
    cursor.execute('''SELECT tasks_completed, streak_days, early_completed 
                      FROM user_stats WHERE user_id = ?''', (user_id,))
    stats = cursor.fetchone()
    if not stats:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏!")
        return
    tasks_completed, streak_days, early_completed = stats
    cursor.execute('''SELECT COUNT(*) FROM deadlines 
                      WHERE user_id = ? AND completed = 1 
                      AND deadline >= date('now', '-7 days')''', (user_id,))
    weekly_completed = cursor.fetchone()[0]
    response = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</b> {tasks_completed}\n"
        f"üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {streak_days} –¥–Ω–µ–π\n"
        f"‚è± <b>–î–æ—Å—Ä–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {early_completed}\n"
        f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b> {weekly_completed}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    )
    await update.message.reply_text(response, parse_mode='HTML')


async def start(update, context):
    cursor = conn.cursor()
    user_id = update.message.from_user.id
    cursor.execute("SELECT user_name FROM user_ids WHERE id = ?", (user_id,))
    user_data = cursor.fetchone()
    if user_data is None:
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n'
            '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        user_states[user_id] = 'awaiting_name'
    else:
        user_name = user_data[0] or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n'
            '–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω–æ–º:\n\n'
            'üìå /add_deadline ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–¥–∞–≤–∞–π –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º!)\n'
            'üìã /my_deadlines ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á (—á—Ç–æ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ?)\n'
            'üìß /set_mail ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É (–¥–ª—è –≤–∞–∂–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n'
            'üìä /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç—ã –∂–∂–µ—à—å!)\n'
            'üÜò /help ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ (—è –ø–æ–º–æ–≥—É!)\n\n'
            'P.S. –¢—ã —É–∂–µ –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á–∞—Ö! üí™\n'
            '–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å, –∞ —Ç–∞–º –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–∏—Ç—Å—è üòä')


async def help(update, context):
    cursor = conn.cursor()
    user_id = update.message.from_user.id
    cursor.execute("SELECT user_name FROM user_ids WHERE id = ?", (user_id,))
    user_data = cursor.fetchone()
    if user_data is None:
        await start(update, context)
        return
    user_name = user_data[0]
    await update.message.reply_text(
        '–û–π, —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ? –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ! ü§ó\n\n'
        '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:\n\n'
        '‚Ä¢ /add_deadline - –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á–∫—É\n'
        '‚Ä¢ /my_deadlines - –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤ —Ä–∞–±–æ—Ç–µ\n'
        '‚Ä¢ /set_mail - —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–≤–æ—é –ø–æ—á—Ç—É\n'
        '‚Ä¢ /stats - –ø–æ–ª—é–±—É–µ–º—Å—è –Ω–∞ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏\n\n'
        '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –µ—Å–ª–∏ —á—Ç–æ! –ú—ã —Å —Ç–æ–±–æ–π –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞! ‚úåÔ∏è')


async def handle_name(update, context):
    user_id = update.message.from_user.id
    user_name = update.message.text.strip()
    if len(user_name) < 2 or len(user_name) > 50:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)')
        return
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT OR REPLACE INTO user_ids (id, user_name) VALUES (?, ?)', (user_id, user_name))
        conn.commit()
        if user_id in user_states:
            del user_states[user_id]
        await update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n'
            '–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω–æ–º:\n\n'
            'üìå /add_deadline ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–¥–∞–≤–∞–π –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º!)\n'
            'üìã /my_deadlines ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á (—á—Ç–æ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ?)\n'
            'üìß /set_mail ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É (–¥–ª—è –≤–∞–∂–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n'
            'üìä /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç—ã –∂–∂–µ—à—å!)\n'
            'üÜò /help ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ (—è –ø–æ–º–æ–≥—É!)\n\n'
            'P.S. –¢—ã —É–∂–µ –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á–∞—Ö! üí™\n'
            '–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å, –∞ —Ç–∞–º –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–∏—Ç—Å—è üòä')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


async def add_deadline(update, context):
    global command
    command = "d"
    await update.message.reply_text(
        'üìù –î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω! –≠—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è üòä\n\n'
        '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        '<b>–ü—Ä–µ–¥–º–µ—Ç, –ó–∞–¥–∞–Ω–∏–µ, –î–î.–ú–ú.–ì–ì–ì–ì</b>\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
        '<code>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –î–ó 5, 25.12.2025</code>\n\n'
        '‚ú® <i>–°–æ–≤–µ—Ç:</i> –ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –≤—ã—à–µ –∏ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ!\n\n'
        '–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! –û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥ üí™',
        parse_mode='HTML')


async def getting_s_text(update, context):
    user_id = update.message.from_user.id
    if user_id in user_states and user_states[user_id] == 'awaiting_name':
        await handle_name(update, context)
        return
    try:
        if command == "d":
            data = [x.strip() for x in update.message.text.split(',')]
            if len(data) != 3:
                raise ValueError
            subject, task, deadline = data
            deadline_date = datetime.strptime(deadline, '%d.%m.%Y').date()
            if deadline_date < datetime.now().date():
                raise ZeroDivisionError
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO deadlines (user_id, subject, task, deadline) '
                'VALUES (?, ?, ?, ?)',
                (user_id, subject, task, deadline_date.strftime('%Y-%m-%d')))
            conn.commit()
            await update.message.reply_text(
                f'–î–µ–¥–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω!\n'
                f'–ü—Ä–µ–¥–º–µ—Ç: {subject}\n'
                f'–ó–∞–¥–∞–Ω–∏–µ: {task}\n'
                f'–°—Ä–æ–∫: {deadline}')
            await my_deadlines(update, context)
        elif command == "m":
            ml = update.message.text
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE user_ids SET user_email = ? '
                'WHERE id = ?', (ml, user_id))
            conn.commit()
            await update.message.reply_text(f'–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    except ValueError:
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π:\n'
            '–ü—Ä–µ–¥–º–µ—Ç, –ó–∞–¥–∞–Ω–∏–µ, –î–î.–ú–ú.–ì–ì–ì–ì')
    except ZeroDivisionError:
        await update.message.reply_text(
            f'–ö–∞–∂–µ—Ç—Å—è –≤—Ä–µ–º—è –≤—ã—à–ª–æ, —Å–µ–≥–æ–¥–Ω—è —É–∂–µ {datetime.now().date().strftime("%d.%m.%Y")}')


async def my_deadlines(update, context):
    user_id = update.message.from_user.id
    today = datetime.now().date()
    print(today)
    cursor = conn.cursor()
    cursor.execute("""SELECT subject, task, deadline, id FROM deadlines WHERE user_id = ?""", (user_id,))
    deadlines = cursor.fetchall()
    print(deadlines)
    s = ""
    if deadlines:
        tomorrow = today + timedelta(days=1)
        cursor.execute(
            "SELECT subject, task, deadline FROM deadlines "
            "WHERE deadline = ? and user_id = ?",
            (str(today), user_id,))
        crazy_fast = cursor.fetchall()
        s = ""
        for el in crazy_fast:
            s += (f"üî¥ –ü—Ä–µ–¥–º–µ—Ç: {el[0]}\n     –ó–∞–¥–∞–Ω–∏–µ: {el[1]}\n     "
                  f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {'.'.join(reversed(el[2].split('-')))}\n\n")
        crazy_fast = []
        cursor.execute(
            "SELECT subject, task, deadline FROM deadlines "
            "WHERE deadline = ? and user_id = ?",
            (str(tomorrow), user_id,))
        crazy_fast = cursor.fetchall()
        for el in crazy_fast:
            s += (f"üü° –ü—Ä–µ–¥–º–µ—Ç: {el[0]}\n     –ó–∞–¥–∞–Ω–∏–µ: {el[1]}\n     "
                  f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {'.'.join(reversed(el[2].split('-')))}\n\n")
        crazy_fast = []
        cursor.execute(
            "SELECT subject, task, deadline FROM deadlines WHERE (deadline != ? and deadline != ?) and user_id = ?",
            (str(today), str(tomorrow), user_id,))
        crazy_fast = cursor.fetchall()
        for el in crazy_fast:
            s += (f"üü¢ –ü—Ä–µ–¥–º–µ—Ç: {el[0]}\n     –ó–∞–¥–∞–Ω–∏–µ: {el[1]}\n     "
                  f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {'.'.join(reversed(el[2].split('-')))}\n\n")
    if s:
        buttons = []
        for el in deadlines:
            subject, task, deadline, deadline_id = el
            button = InlineKeyboardButton(f"{subject}: {task}", callback_data=f"complete_{deadline_id}")
            buttons.append([button])
        keyboard = InlineKeyboardMarkup(buttons)
        await context.bot.send_message(
            chat_id=user_id,
            text=s +
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏:",
            reply_markup=keyboard
        )
    else:
        await context.bot.send_message(chat_id=user_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π: /add_deadline")


async def mark_task_completed(update, context):
    user_id = update.callback_query.from_user.id
    callback_data = update.callback_query.data
    task_id = callback_data.split('_')[1]

    cursor = conn.cursor()
    cursor.execute('SELECT deadline FROM deadlines WHERE id = ?', (task_id,))
    task = cursor.fetchone()
    if task:
        deadline_date = datetime.strptime(task[0], '%Y-%m-%d').date()
        today = datetime.now().date()

        early_completed = 0
        if deadline_date > today:
            early_completed = 2
        else:
            early_completed = 1

        cursor.execute('UPDATE deadlines SET completed = 1 WHERE id = ?', (task_id,))
        cursor.execute(
            'SELECT tasks_completed, last_completed, streak_days, early_completed FROM user_stats WHERE user_id = ?',
            (user_id,))
        stats = cursor.fetchone()
        if stats:
            tasks_completed, last_completed, streak_days, early = stats
            tasks_completed += 1
            early_completed += early
            if last_completed == (today - timedelta(days=1)).isoformat():
                streak_days += 1
            elif last_completed != today.isoformat():
                streak_days = 1

            cursor.execute('''
                UPDATE user_stats
                SET tasks_completed = ?, last_completed = ?, streak_days = ?, early_completed = ?
                WHERE user_id = ?
            ''', (tasks_completed, today.isoformat(), streak_days, early_completed, user_id))
        else:
            cursor.execute('''
                INSERT INTO user_stats (user_id, tasks_completed, last_completed, streak_days, early_completed)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, 1, today.isoformat(), 1, early_completed))
        cursor.execute('DELETE FROM deadlines WHERE id = ? AND user_id = ?', (task_id, user_id))
        conn.commit()
        await update.callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ")
        await update.callback_query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")


async def broadcast_message(context, message):
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM user_ids")
    users = cursor.fetchall()
    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=message)
            await mail(context, message, user[0])
            await asyncio.sleep(0.1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


async def scheduled_broadcast(context):
    message = (
        "üì¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã: /my_deadlines\n"
        "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: /add_deadline"
    )
    await broadcast_message(context, message)


async def admin_broadcast(update, context):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /admin_broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    message = " ".join(context.args)
    await broadcast_message(context, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")


async def add_mail(update, context):
    global command
    command = "m"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É")


async def mail(update, context, usid):
    try:
        user_id = usid
        cursor = conn.cursor()
        cursor.execute("""SELECT user_email FROM user_ids WHERE id = ?""", (user_id,))
        mail_us = cursor.fetchall()
        print(mail_us)
        mail_us = mail_us[0][0]
        if mail_us:
            try:
                yag = yagmail.SMTP(
                    user="workhazieva@yandex.ru",
                    password="siljyenedxygkvyz",
                    host="smtp.yandex.ru",
                    port=465,
                    smtp_ssl=True
                )
                today = datetime.now().date()
                tomorrow = today + timedelta(days=1)
                cursor.execute(
                    "SELECT subject, task, deadline FROM deadlines "
                    "WHERE (deadline = ?) and user_id = ?",
                    (str(today), user_id,))
                crazy_fast = cursor.fetchall()
                s = ""
                for el in crazy_fast:
                    s += (f"üî¥ –ü—Ä–µ–¥–º–µ—Ç: {el[0]}\n     –ó–∞–¥–∞–Ω–∏–µ: {el[1]}\n    "
                          f"–≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {'.'.join(reversed(el[2].split('-')))}\n\n")
                cursor.execute(
                    "SELECT subject, task, deadline FROM deadlines "
                    "WHERE (deadline = ?) and user_id = ?",
                    (str(tomorrow), user_id,))
                crazy_fast = cursor.fetchall()
                for el in crazy_fast:
                    s += (f"üü° –ü—Ä–µ–¥–º–µ—Ç: {el[0]}\n     –ó–∞–¥–∞–Ω–∏–µ: {el[1]}\n    "
                          f"–≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {'.'.join(reversed(el[2].split('-')))}\n\n")
                cursor.execute(
                    "SELECT subject, task, deadline FROM deadlines "
                    "WHERE (deadline != ? and deadline != ?) and user_id = ?",
                    (today, tomorrow, user_id,))
                crazy_fast = cursor.fetchall()
                for el in crazy_fast:
                    s += (f"üü¢ –ü—Ä–µ–¥–º–µ—Ç: {el[0]}\n     –ó–∞–¥–∞–Ω–∏–µ: {el[1]}\n    "
                          f"–≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {'.'.join(reversed(el[2].split('-')))}\n\n")
                if not s:
                    s = ("–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π :)\n\n\n\n"
                         "–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ SmartHomeworkBot\n"
                         "https://t.me/SmartHomeworkBot")
                yag.send(
                    to=mail_us,
                    subject="–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞",
                    contents=s + "\n\n\n\n"
                                 "–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ SmartHomeworkBot\n"
                                 "https://t.me/SmartHomeworkBot")
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            finally:
                yag.close()
    except Exception as e:
        print(e)


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("add_deadline", add_deadline))
    application.add_handler(CallbackQueryHandler(mark_task_completed, pattern="^complete_"))
    application.add_handler(CommandHandler("my_deadlines", my_deadlines))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, getting_s_text))
    application.add_handler(CommandHandler("admin_broadcast", admin_broadcast))
    application.add_handler(CommandHandler("set_mail", add_mail))

    application.job_queue.run_repeating(scheduled_broadcast, interval=86400, first=10)

    application.run_polling()


if __name__ == "__main__":
    main()
